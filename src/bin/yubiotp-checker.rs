/*
 * Copyright 2023 sukawasatoru
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

use base64::Engine;
use clap::Parser;
use hmac::{Hmac, Mac};
use rand::distributions::{Alphanumeric, DistString};
use rust_myscript::prelude::*;
use sha1::Sha1;
use std::collections::BTreeMap;
use url::{form_urlencoded, Url};

/// Validate OTP generated by YubiKeys - https://developers.yubico.com/OTP/
#[derive(Parser)]
struct Opt {
    /// Client ID for YubiCloud
    #[arg(long)]
    client_id: String,

    /// Secret key for YubiCloud encoded with Base64
    #[arg(long)]
    client_secret: Option<String>,

    /// Endpoint to use validate the Yubico OTP
    #[arg(long, default_value = "https://api.yubico.com/wsapi/2.0/verify")]
    server_endpoint: Url,

    /// The OTP generated by YubiKeys
    otp: String,
}

fn main() -> Fallible<()> {
    tracing_subscriber::fmt::init();

    info!("hello");
    let opt = Opt::parse();

    let mut query_map = BTreeMap::new();
    query_map.insert("id", opt.client_id);
    query_map.insert("otp", opt.otp);
    query_map.insert(
        "nonce",
        Alphanumeric.sample_string(&mut rand::thread_rng(), 40),
    );

    let secret = opt.client_secret.map(Secret);
    if let Some(secret) = &secret {
        let h = create_request_hmac(&query_map, secret)?;
        query_map.insert("h", h);
    }
    let mut url = opt.server_endpoint;
    url.query_pairs_mut().extend_pairs(query_map.iter());
    let res = reqwest::blocking::get(url)?.error_for_status()?;
    let res = res.text()?;
    eprintln!("{res}");

    if let Some(secret) = &secret {
        validate_response(&res, secret)?;
    }

    info!("bye");
    Ok(())
}

#[derive(Debug, Eq, PartialEq)]
struct Secret(String);

fn create_request_hmac(queries: &BTreeMap<&str, String>, secret: &Secret) -> Fallible<String> {
    let mut serializer = form_urlencoded::Serializer::new(String::new());
    for (key, value) in queries {
        if *key == "h" {
            continue;
        }
        serializer.append_pair(key, value);
    }

    let mut mac = Hmac::<Sha1>::new_from_slice(
        &base64::engine::general_purpose::STANDARD.decode(&secret.0)?,
    )?;
    mac.update(serializer.finish().as_bytes());
    Ok(base64::engine::general_purpose::STANDARD.encode(mac.finalize().into_bytes()))
}

fn validate_response(response: &str, secret: &Secret) -> Fallible<()> {
    let mut map = BTreeMap::new();
    let mut h = Option::<String>::None;
    for entry in response.lines() {
        let mut pair = entry.split('=');
        let key = match pair.next() {
            Some(data) => data,
            None => {
                info!("key not found");
                continue;
            }
        };
        let mut value = match pair.next() {
            Some(data) => data.to_owned(),
            None => {
                info!("value not found");
                continue;
            }
        };
        for data in pair {
            value.push('=');
            value.push_str(data);
        }

        if key == "h" {
            h = Some(value);
            continue;
        }
        if key == "status" && value != "OK" {
            bail!("bad request. reason: {value}");
        }
        map.insert(key, value);
    }

    let h = match h {
        Some(data) => data,
        None => bail!("hmac not found"),
    };

    let mut mac = Hmac::<Sha1>::new_from_slice(
        &base64::engine::general_purpose::STANDARD.decode(&secret.0)?,
    )?;
    mac.update(
        map.iter()
            .map(|(key, value)| format!("{key}={value}"))
            .collect::<Vec<_>>()
            .join("&")
            .as_bytes(),
    );
    let expected = base64::engine::general_purpose::STANDARD.encode(mac.finalize().into_bytes());

    if expected != h {
        bail!("expect {expected}, but {h}");
    }

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    /// https://developers.yubico.com/OTP/Specifications/Test_vectors.html#_hmac_test_vectors
    #[test]
    fn hmac_encode_test_vector() {
        let mut queries = BTreeMap::new();
        queries.insert("id", "1".into());
        queries.insert("otp", "vvungrrdhvtklknvrtvuvbbkeidikkvgglrvdgrfcdft".into());
        queries.insert("nonce", "jrFwbaYFhn0HoxZIsd9LQ6w2ceU".into());
        let actual =
            create_request_hmac(&queries, &Secret("mG5be6ZJU1qBGz24yPh/ESM3UdU=".into())).unwrap();

        let actual = form_urlencoded::Serializer::new(String::new())
            .append_pair("h", &actual)
            .finish();
        assert_eq!("h=%2Bja8S3IjbX593%2FLAgTBixwPNGX4%3D".to_string(), actual);
    }

    /// https://developers.yubico.com/OTP/Specifications/Test_vectors.html#_hmac_test_vectors
    #[test]
    fn hmac_decode_test_vector() {
        let src = r#"status=OK
t=2019-06-06T05:14:15Z0369
nonce=0123456789abcdef
otp=cccccckdvvulethkhtvkrtbeukiettvfceekurncllcj
sl=25
h=iCV9uFJDtuyELQsxFPnR80Yj2XU=
"#;
        validate_response(src, &Secret("mG5be6ZJU1qBGz24yPh/ESM3UdU=".into())).unwrap();
    }
}
