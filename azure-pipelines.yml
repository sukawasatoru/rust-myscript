trigger:
- master
jobs:
  - job:
    displayName: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - checkout: self
        fetchDepth: 1
      - script: rustup component add clippy
        displayName: Setup Rust
      - script: cargo -v build
        displayName: Build
      - script: cargo clippy
        displayName: Clippy
  - job:
    displayName: Windows
    pool:
      vmImage: 'windows-latest'
    steps:
      - checkout: self
        fetchDepth: 1
      - script: rustup component add clippy
        displayName: Setup Rust
      - script: cargo -v build
        displayName: Build
      - script: cargo clippy
        displayName: Clippy
  - job:
    displayName: macOS
    pool:
      vmImage: 'macOS-latest'
    variables:
      RUSTUP_HOME: $(Pipeline.Workspace)/.rustup
      CARGO_HOME: $(Pipeline.Workspace)/.cargo
    steps:
      - checkout: self
        fetchDepth: 1
      - script: |
          curl -sSf https://sh.rustup.rs | bash -s -- -v -y --no-modify-path
          $(CARGO_HOME)/bin/rustup component add clippy
          echo "##vso[task.prependpath]$(CARGO_HOME)/bin"
        displayName: Setup Rust
      - script: cargo -v build
        displayName: Build
      - script: cargo clippy
        displayName: Clippy
  - job:
    displayName: macOS-M1
    pool:
      name: Default
      demands:
        - rust
        - agent.os -equals Darwin
    variables:
      RUSTUP_TOOLCHAIN: 1.48.0-x86_64
    steps:
      - script: |
          cargo -v build 2> >(tee stderr.log >&2)
          CODE=$?
          grep -qe ^warning stderr.log && grep -e ^warning stderr.log | xargs -ILINE echo "##vso[task.logissue type=warning]LINE" || true
          grep -qe ^error stderr.log && grep -e ^error stderr.log | xargs -ILINE echo "##vso[task.logissue type=error]LINE" || true
          exit $CODE
        displayName: Build
      - script: |
          cargo clippy 2> >(tee stderr.log >&2)
          CODE=$?
          grep -qe ^warning stderr.log && grep -e ^warning stderr.log | xargs -ILINE echo "##vso[task.logissue type=warning]LINE" || true
          grep -qe ^error stderr.log && grep -e ^error stderr.log | xargs -ILINE echo "##vso[task.logissue type=error]LINE" || true
          exit $CODE
        displayName: Clippy
